FROM golang:1.23.9-alpine AS build
RUN apk add --no-cache build-base curl git
WORKDIR $GOPATH/src/github.com/plgd-dev/hub
COPY go.mod go.sum ./
RUN go mod download
COPY . .
WORKDIR /usr/local/go
RUN ( patch -p1 < "$GOPATH/src/github.com/plgd-dev/hub/tools/docker/patches/shrink_tls_conn.patch" )

ARG ROOT_DIRECTORY=$GOPATH/src/github.com/plgd-dev/hub

# cert-tool
WORKDIR $ROOT_DIRECTORY/tools/cert-tool
RUN go build \
	-ldflags "-linkmode external -extldflags -static" \
	-o /go/bin/cert-tool

ARG DPS_DIRECTORY=$ROOT_DIRECTORY/device-provisioning-service

WORKDIR $DPS_DIRECTORY/service
RUN go test -c \
	-ldflags "-linkmode external -extldflags -static" \
	-o /go/bin/dps-service.test

WORKDIR $DPS_DIRECTORY/store/mongodb
RUN go test -c \
	-ldflags "-linkmode external -extldflags -static" \
	-o /go/bin/dps-mongodb.test

WORKDIR $DPS_DIRECTORY/security/oauth/clientcredentials
RUN go test -c \
	-ldflags "-linkmode external -extldflags -static" \
	-o /go/bin/dps-clientcredentials.test

# nats
WORKDIR $ROOT_DIRECTORY
RUN apkArch="$(apk --print-arch)"; \
	case "$apkArch" in \
	armhf) ARCH='arm' ;; \
	aarch64) ARCH='arm64' ;; \
	x86) ARCH='386' ;; \
	x86_64) ARCH='amd64' ;; \
	*) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; \
	esac; \
	curl -L --proto "=https" https://github.com/nats-io/nats-server/releases/download/v2.3.1/nats-server-v2.3.1-linux-${ARCH}.zip -o ./nats-server.zip \
	&& curl -L --proto "=https" https://github.com/nats-io/natscli/releases/download/0.0.24/nats-0.0.24-linux-${ARCH}.zip -o ./nats.zip \
	&& mkdir -p ./nats-server \
	&& unzip ./nats-server.zip -d ./nats-server \
	&& cp ./nats-server/*/nats-server /go/bin/nats-server \
	&& mkdir -p ./nats \
	&& unzip ./nats.zip -d ./nats \
	&& cp ./nats/*/nats /go/bin/nats

FROM ubuntu:22.04 AS service
RUN apt update \
	&& DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y ca-certificates curl gnupg iproute2 lsb-release netcat-traditional openssl systemctl \
	&& curl -L --proto "=https" https://www.mongodb.org/static/pgp/server-6.0.asc | gpg --dearmor | tee /usr/share/keyrings/mongodb.gpg > /dev/null \
	&& ARCH="$(dpkg --print-architecture)" ; curl -L --proto "=https" https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_${ARCH} -o /usr/bin/yq \
	&& chmod +x /usr/bin/yq \
	&& echo "deb [ arch=${ARCH} signed-by=/usr/share/keyrings/mongodb.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list \
	&& curl -fsSL --proto "=https" https://download.docker.com/linux/ubuntu/gpg | /usr/bin/gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
	&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list \
	&& apt update  \
	&& DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends install -y docker-ce mongodb-org mongodb-org-server \
	&& apt-get clean
COPY --from=build /go/bin/cert-tool /usr/local/bin/cert-tool
COPY --from=build /go/bin/dps-service.test /usr/local/bin/dps-service.test
COPY --from=build /go/bin/dps-mongodb.test /usr/local/bin/dps-mongodb.test
COPY --from=build /go/bin/dps-clientcredentials.test /usr/local/bin/dps-clientcredentials.test
COPY --from=build /go/bin/nats-server /usr/local/bin/nats-server
COPY --from=build /go/bin/nats /usr/local/bin/nats
COPY test/device-provisioning-service/run.sh /usr/local/bin/run.sh

# global
ENV FQDN="localhost"
ENV PREPARE_ENV="true"
ENV RUN="true"

# global - certificates generated by cert-tool
ENV CERT_TOOL_SIGN_ALG=ECDSA-SHA256
ENV CERT_TOOL_ELLIPTIC_CURVE=P256

# ports
ENV MONGO_PORT=27017
ENV NATS_PORT=4222
# ENV COAP_GATEWAY_UDP_ENABLED=false
# ENV DPS_UDP_ENABLED=false

ENTRYPOINT ["/usr/local/bin/run.sh"]

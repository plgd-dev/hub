# syntax=docker/dockerfile:1
FROM golang:1.23.9-alpine AS build
ARG VERSION
ARG COMMIT_DATE
ARG SHORT_COMMIT
ARG DATE
ARG RELEASE_URL
RUN apk add --no-cache build-base curl git
WORKDIR $GOPATH/src/github.com/plgd-dev/hub
COPY go.mod go.sum ./
RUN go mod download
COPY . .
WORKDIR /usr/local/go
RUN ( patch -p1 < "$GOPATH/src/github.com/plgd-dev/hub/tools/docker/patches/shrink_tls_conn.patch" )

ARG root_directory=$GOPATH/src/github.com/plgd-dev/hub
#cert-tool
ARG tool=cert-tool
WORKDIR $root_directory/tools/$tool
RUN go build \
    -ldflags "-linkmode external -extldflags -static \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitDate=$COMMIT_DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitHash=$SHORT_COMMIT \
    -X github.com/plgd-dev/hub/v2/pkg/build.BuildDate=$DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.Version=$VERSION \
    -X github.com/plgd-dev/hub/v2/pkg/build.ReleaseURL=$RELEASE_URL" \
    -o /go/bin/cert-tool

#coap-gateway
#the "device_integration" tag should ensure that only integration tests with a device simulator are compiled
ARG service=coap-gateway
WORKDIR $root_directory/$service/service
RUN go test -p 1 -c -tags=device_integration \
    -ldflags "-linkmode external -extldflags -static \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitDate=$COMMIT_DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitHash=$SHORT_COMMIT \
    -X github.com/plgd-dev/hub/v2/pkg/build.BuildDate=$DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.Version=$VERSION \
    -X github.com/plgd-dev/hub/v2/pkg/build.ReleaseURL=$RELEASE_URL" \
    -o /go/bin/coap-gateway.test

#grpc-gateway
ARG service=grpc-gateway
WORKDIR $root_directory/$service/service
RUN go test -p 1 -c \
    -ldflags "-linkmode external -extldflags -static \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitDate=$COMMIT_DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitHash=$SHORT_COMMIT \
    -X github.com/plgd-dev/hub/v2/pkg/build.BuildDate=$DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.Version=$VERSION \
    -X github.com/plgd-dev/hub/v2/pkg/build.ReleaseURL=$RELEASE_URL" \
    -o /go/bin/grpc-gateway.test

#test/iotivity-lite
ARG service=test-iotivity-lite
WORKDIR $root_directory/test/iotivity-lite/service
RUN go test -p 1 -c \
    -ldflags "-linkmode external -extldflags -static \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitDate=$COMMIT_DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.CommitHash=$SHORT_COMMIT \
    -X github.com/plgd-dev/hub/v2/pkg/build.BuildDate=$DATE \
    -X github.com/plgd-dev/hub/v2/pkg/build.Version=$VERSION \
    -X github.com/plgd-dev/hub/v2/pkg/build.ReleaseURL=$RELEASE_URL" \
    -o /go/bin/test-iotivity-lite.test

#nats
WORKDIR $root_directory
RUN apkArch="$(apk --print-arch)"; \
    case "$apkArch" in \
    armhf) ARCH='arm' ;; \
    aarch64) ARCH='arm64' ;; \
    x86) ARCH='386' ;; \
    x86_64) ARCH='amd64' ;; \
    *) echo >&2 "error: unsupported architecture: $apkArch"; exit 1 ;; \
    esac; \
    curl -L https://github.com/nats-io/nats-server/releases/download/v2.3.1/nats-server-v2.3.1-linux-${ARCH}.zip -o ./nats-server.zip ; \
    curl -L https://github.com/nats-io/natscli/releases/download/0.0.24/nats-0.0.24-linux-${ARCH}.zip -o ./nats.zip
RUN mkdir -p ./nats-server
RUN unzip ./nats-server.zip -d ./nats-server
RUN cp ./nats-server/*/nats-server /go/bin/nats-server

RUN mkdir -p ./nats
RUN unzip ./nats.zip -d ./nats
RUN cp ./nats/*/nats /go/bin/nats

FROM ubuntu:22.04 AS service
# iproute2 -> ip utility in run.sh
# netcat -> nc utility in run.sh
# nginx -> nginx server in run.sh
# openssl -> openssl utility in run.sh
RUN apt update \
    && apt-get install -y --no-install-recommends ca-certificates curl gnupg iproute2 netcat nginx openssl \
    && apt-get clean
RUN curl -L --proto "=https" https://pgp.mongodb.com/server-6.0.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-6.0.gpg
RUN echo "deb [ arch=$(dpkg --print-architecture) ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
RUN apt update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends mongodb-org mongodb-org-server \
    && apt-get clean
COPY --from=build /go/bin/cert-tool /usr/local/bin/cert-tool
COPY --from=build /go/bin/coap-gateway.test /usr/local/bin/coap-gateway.test
COPY --from=build /go/bin/grpc-gateway.test /usr/local/bin/grpc-gateway.test
COPY --from=build /go/bin/test-iotivity-lite.test /usr/local/bin/test-iotivity-lite.test
COPY --from=build /go/bin/nats-server /usr/local/bin/nats-server
COPY --from=build /go/bin/nats /usr/local/bin/nats
COPY test/cloud-server/run.sh /usr/local/bin/run.sh

# global
ENV FQDN="localhost"
ENV PREPARE_ENV="true"
ENV RUN="true"

# global - certificates generated by cert-tool
ENV CERT_TOOL_SIGN_ALG=ECDSA-SHA256
ENV CERT_TOOL_ELLIPTIC_CURVE=P256

# ports
ENV MONGO_PORT=27017
ENV NATS_PORT=4222
ENV COAP_GATEWAY_UDP_ENABLED=false

ENTRYPOINT ["/usr/local/bin/run.sh"]

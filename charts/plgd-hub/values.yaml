# -- Global config variables
global:
  # -- Global domain
  domain:
  # -- hubId. Used by coapgateway, resourceaggregate, resourcedirectory, indentitystore, certificateauthority. It must be unique
  hubId:
  # -- OAuth owner Claim
  ownerClaim: "sub"
  # -- Device ID claim
  deviceIdClaim:
  # -- Global Default command time to live for resource-aggregate and resource-directory
  defaultCommandTimeToLive: "10s"
  # -- Use database. Supported values: "mongoDB", "cqlDB"
  useDatabase: "mongoDB"
  # -- MongoDB URI
  mongoUri: ""
  # -- OAuth authority
  authority:
  # -- OAuth audience
  audience: ""
  # -- M2M OAuth server
  m2mOAuthServer:
    # -- private key to sign JWT m2m tokens
    privateKey: ""
  # -- Default OAuth authorization for all services
  authorization:
    audience: '{{ include "plgd-hub.globalAudience" . }}'
    tokenTrustVerification:
      cacheExpiration: 30s
    endpoints:
      # -- Authorization endpoint to Customer OAuth server
      - authority: '{{ include "plgd-hub.globalAuthority" . }}'
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              # enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: true
      - authority: '{{ include "plgd-hub.m2mOAuthServerAuthority" . }}'
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              # enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: true
  # -- Enable *.{{ global.domain }} for all external domain
  enableWildCartCert: true
  # -- Sets cloud to standby mode
  standby: false
  # -- Global OAuth configuration used by multiple services
  oauth:
    device: []
    #     - name:
    #       clientID:
    #       clientSecret:
    #       scopes: []
    #       redirectURL:
    #       useInUi: true
    web:
      clientID:
      scopes: ["openid"]
  # -- Custom CA certificates
  extraCAPool:
    # -- Custom CA certificate for authorization endpoint in PEM format
    authorization: '{{ include "plgd-hub.oldGlobalAuthorizationCAPool" . }}'
    # -- Custom CA certificate for internal endpoints in PEM format
    internal:
    # -- Custom CA certificate for storage(database) endpoints in PEM format
    storage:
    # -- Custom CA certificate for coap endpoints in PEM format
    coap:
  # -- Custom CRL certificates
  crl:
    # -- CRL settings for authorization endpoint
    authorization:
      # -- Custom CA certificate for authorization endpoints in PEM format
      caPool:
      # -- Custom CRL key in PEM format
      key:
      # -- Custom CRL certificate in PEM format
      cert:
    # -- CRL settings for internal endpoint
    internal:
      # -- Custom CA certificate for authorization endpoints in PEM format
      caPool:
      # -- Custom CRL key in PEM format
      key:
      # -- Custom CRL certificate in PEM format
      cert:
    # -- CRL settings for coap endpoint
    coap:
      # -- Custom CA certificate for authorization endpoints in PEM format
      caPool:
      # -- Custom CRL key in PEM format
      key:
      # -- Custom CRL certificate in PEM format
      cert:
  # -- Global Open Telemetry exporter configuration
  openTelemetryExporter:
    # -- Enable OTLP gRPC exporter
    enabled: false
    # -- The gRPC collector to which the exporter is going to send data
    address:
    # -- Expoter keep alive configuration
    keepAlive:
      time: 10s
      timeout: 20s
      permitWithoutStream: true
    # -- Expoter TLS configuration
    tls:
      caPool:
      keyFile:
      certFile:
      useSystemCAPool: false
      crl:
        # enabled: false
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: false
  # -- NATS publisher and subscriber configuration
  nats:
    # -- Lead resource type configuration
    leadResourceType:
      enabled: false
      filter: ""
      regexFilter: []
      useUUID: false
  # -- Set image.tag for all services
  image:
    tag:

# -- Extra deploy. Resolved as template
extraDeploy:

# -- External nats dependency setup
nats:
  enabled: true
  tlsCA:
    enabled: true
    secretName: nats-service-crt
  config:
    nats:
      tls:
        enabled: true
        secretName: nats-service-crt
        merge:
          verify: true
  natsBox:
    enabled: false
  monitor:
    enabled: false

# -- External mongodb-replica dependency setup
mongodb:
  enabled: true
  fullnameOverride: mongodb
  architecture: replicaset
  replicaSetName: rs0
  replicaCount: 3
  persistence:
    enabled: true
  arbiter:
    enabled: false
  auth:
    enabled: false
  image:
    debug: true
  tls:
    enabled: false
  standbyTool:
    # -- Create standby job
    enabled: false
    # -- Log section
    log:
      # -- Logging enabled from level
      level: info
      # -- Dump grpc messages
      dumpBody: false
      # -- The supported values are: "json", "console"
      encoding: json
      stacktrace:
        # -- Log stacktrace
        enabled: false
        # -- Stacktrace from level
        level: warn
      encoderConfig:
        # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
        timeEncoder: rfc3339nano
    # -- Mode of standby job. Supported values: "active", "standby"
    mode: standby
    # -- Name of component. Used in label selectors
    name: mongodb-standby-tool
    # -- Standby members of replica set
    replicaSet:
      # -- Update the replica set configuration with force flag
      forceUpdate: false
      # -- Set the maximum number of waits for becomes members ready.
      maxWaitsForReady: 30
      standby:
        # List of the MongoDB members in the replica set which are used as backup members
        members: []
        # Set the delay for syncing the standby members with the secondary/primary members
        delays: 10m
      secondary:
        # Used to configure the secondary members priority
        priority: 10
        # Set number of votes for the secondary members
        votes: 1
    # - TLS configuration for mongodb-standby-tool to connect to the MongoDB replica set
    clients:
      storage:
        mongoDB:
          # -- Timeout for connection to MongoDB and read/write operations
          timeout: 30s
          tls:
            # -- Path to the CA certificate file
            caPool:
            # -- The certFile and keyFile are the paths to the TLS certificate pair files
            certFile:
            # -- The keyFile are the paths to the TLS certificate pair files
            keyFile:
            # -- Path to the CA certificate file
            useSystemCAPool: false
    # -- Full name to override
    fullnameOverride:
    image:
      # -- Image registry
      registry: ghcr.io/
      # -- Image repository
      repository: plgd-dev/hub/mongodb-standby-tool
      # -- Image tag.
      tag:
      # -- Image pull policy
      pullPolicy: Always
      # -- Image pull secrets
      imagePullSecrets: {}
      # -- RBAC configuration
    rbac:
      # Create RBAC config
      enabled: false
      # -- Name of mongodb-standby SA
      serviceAccountName: mongodb-standby-tool
      # -- template definition for Role/binding etc..
      roleBindingDefitionTpl:
    # -- Additional labels for mongodb-standby job
    jobLabels: {}
    # -- Additional annotations for mongodb-standby job
    jobAnnotations: {}
    # -- Annotations for mongodb-standby pod
    podAnnotations: {}
    # -- Pod security context
    podSecurityContext: {}
    # -- Security context for pod
    securityContext: {}
    # -- Resources limit
    resources: {}
    # -- Node selector
    nodeSelector: {}
    # -- Affinity definition
    affinity: {}
    # -- Toleration definition
    tolerations: {}
    # -- Optional extra volumes
    extraVolumes: {}
    # -- Optional extra volume mounts
    extraVolumeMounts: {}
    # -- Job configuration
    config:
      # -- Job configuration file
      fileName: config.yaml
      # -- Job configuration volume name
      volume: config
      # -- Configuration mount path
      mountPath: /config
  extraEnvVars:
    - name: MONGODB_EXTRA_FLAGS
      value: "--tlsMode=requireTLS --tlsCertificateKeyFile=/certs/cert.pem --tlsCAFile=/certs/ca.pem"
    - name: MONGODB_CLIENT_EXTRA_FLAGS
      value: "--tls --tlsCertificateKeyFile=/certs/cert.pem --tlsCAFile=/certs/ca.pem"
  extraVolumeMounts:
    - name: mongodb-crt
      mountPath: "/certs"
    - name: mongodb-cm-crt
      mountPath: "/certs-original"
    - name: mongodb-extra-ca-pool
      mountPath: "/certs/extra/storage"
  extraVolumes:
    - name: mongodb-crt
      emptyDir: {}
    - name: mongodb-cm-crt
      secret:
        secretName: mongodb-cm-crt
    - name: mongodb-extra-ca-pool
      secret:
        secretName: mongodb-extra-ca-pool
  initContainers:
    # workaround for https://github.com/bitnami/charts/issues/10264, https://jira.mongodb.org/browse/MONGOSH-1240
    - name: mongo-binary
      image: ghcr.io/plgd-dev/hub/mongodb-admin-tool:vnext
      imagePullPolicy: "Always"
      volumeMounts:
        - name: mongodb-crt
          mountPath: "/certs"
        - name: mongodb-cm-crt
          mountPath: "/certs-original"
        - name: mongodb-extra-ca-pool
          mountPath: "/certs/extra/storage"
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      command:
        - sh
        - "-c"
        - |
          /bin/bash <<'EOF'
          #!/bin/bash
          cp /usr/local/bin/mongodb-admin-tool /certs
          echo '
          #!/bin/bash
          set -e
          INIT=0
          while [[ $# -gt 0 ]]; do
            case $1 in
              --init)
                INIT=1
                shift
                ;;
            esac
          done

          CERT_CRT=/certs-original/tls.crt
          CERT_SHA256=/certs/cert.sha256.$(sha256sum ${CERT_CRT} | cut -d " " -f 1)
          CA=/certs-original/ca.crt
          EXTRA_CA=/dev/null
          if [ -f /certs/extra/storage/ca.crt ]; then
            EXTRA_CA=/certs/extra/storage/ca.crt
          fi
          CA_SHA256=$(cat ${CA} ${EXTRA_CA} | sha256sum | cut -d " " -f 1)
          CA_FILE_SHA256=/certs/ca.sha256.$CA_SHA256
          ROTATE_CERTIFICATES=0
          if [ ! -f ${CERT_SHA256} ]; then
            rm -f /certs/cert.sha256.*
            cat ${CERT_CRT} > /certs/cert.pem
            cat /certs-original/tls.key >> /certs/cert.pem
            touch ${CERT_SHA256}
            ROTATE_CERTIFICATES=1
          fi

          if [ ! -f ${CA_FILE_SHA256} ]; then
            rm -f /certs/ca.sha256.*
            cat ${CA} ${EXTRA_CA} > /certs/ca.pem
            touch ${CA_FILE_SHA256}
            ROTATE_CERTIFICATES=1
          fi

          if [ "${INIT}" == "1" ]; then
            exit 0
          fi

          if [ "${ROTATE_CERTIFICATES}" == "1" ]; then
            echo "Rotating certificates"
            /certs/mongodb-admin-tool --tls --directConnection --tlsCertificateKeyFile=/certs/cert.pem --tlsCAFile=/certs/ca.pem --eval db.adminCommand\("{rotateCertificates: 1, message: \"Rotating certificates\"}"\)
          else
            echo "Ping database"
            /certs/mongodb-admin-tool --tls --directConnection --tlsCertificateKeyFile=/certs/cert.pem --tlsCAFile=/certs/ca.pem --eval db.adminCommand\(\"ping\"\)
          fi
          ' > /certs/livenessProbe.sh
          chmod uga+x /certs/livenessProbe.sh
          /certs/livenessProbe.sh --init
          EOF
  livenessProbe:
    enabled: false
  customLivenessProbe:
    exec:
      command:
        - /bin/bash
        - "-c"
        - /certs/livenessProbe.sh
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - bash
        - -ec
        - |
          TLS_OPTIONS='--tls --tlsCertificateKeyFile=/certs/cert.pem --tlsCAFile=/certs/ca.pem'
          mongosh $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 6

scylla:
  # -- Enable scylla service. Required scylla operator: https://github.com/scylladb/scylla-operator/blob/master/docs/source/generic.md#deploy-scylla-operator
  enabled: false
  scyllaImage:
    tag: "5.2.9"
  # Name of datacenter
  datacenter: "dc-1"
  sysctls:
    - "fs.aio-max-nr=2097152"
  # List of racks
  racks:
    - name: "dc-1a"
      # Name of additional scylla config configMap
      scyllaConfig: "scylla-cfg"
      # Storage definition
      storage:
        capacity: 10Gi
      volumes:
        - name: scylla-certs-volume
          secret:
            # scylla certificate secret name in format scylla-{{ scylla.racks[].name}}-crt
            secretName: scylla-dc-1a-crt
      volumeMounts:
        - name: scylla-certs-volume
          mountPath: /certs
      # Number of rack members (nodes)
      members: 3
      resources:
        limits:
          cpu: 1
          memory: 4Gi
        requests:
          cpu: 1
          memory: 4Gi

cluster:
  # -- Cluster internal DNS prefix
  dns: cluster.local

# -- Cert-manager integration section
certmanager:
  # -- Enable cert-manager integration
  enabled: true
  # -- Default cert-manager section
  default:
    # -- Default cert-manager issuer
    issuer:
      # -- Enable Default issuer
      enabled: true
      # -- Labels for default issuer
      labels: {}
      # -- Annotation for default issuer
      annotations: {}
      # -- Name of default issuer
      name: default-issuer
      # -- Kind of default issuer
      kind: Issuer
      # -- Group of default issuer
      group: cert-manager.io
      # -- Default issuer specification.
      spec:
        selfSigned: {}
    # -- Default certificate specification
    cert:
      # -- Certificate labels
      labels: {}
      # -- Certificate annotations
      annotations: {}
      # -- Certificate duration
      duration: 8760h0m0s
      # -- Certificate renew before
      renewBefore: 360h0m0s
      # -- Certificate key spec
      key:
        # -- Algorithm
        algorithm: ECDSA
        # -- Key size
        size: 256
    ca:
      enabled: true
      # -- Common name for CA created as default issuer
      commonName: plgd-ca
      secret:
        # -- Name of secret
        name: plgd-ca
      issuerRef:
        # -- Kind of CA issuer
        kind:
        # -- Name of issuer for sign CA
        name:
        # -- Group of issuer for sign CA
        group:
      issuer:
        # -- Enable root issuer
        enabled: true
        # -- Labels for root issuer
        labels: {}
        # -- Annotation for root issuer
        annotations: {}
        # -- Name of root issuer
        name: ca-issuer
        # -- Kind of root issuer
        kind: Issuer
        # -- Group of root issuer
        group:
        # -- Default issuer specification.
        spec:
          selfSigned: {}
  internal:
    # -- Internal issuer. In case you want to create your own issuer for internal certs
    issuer:
      # -- Labels
      labels: {}
      # -- Annotations
      annotations: {}
      # -- Name
      name:
      # -- Kind of internal issuer
      kind:
      # -- Group of internal issuer
      group:
      # -- cert-manager issuer spec
      spec:
    cert:
      # -- Certificate duration
      duration:
      # -- Certificate renew before
      renewBefore:
      key:
        # -- Certificate key algorithm
        algorithm:
        # -- Certificate key size
        size:
  storage:
    # -- Storage issuer. In case you want to create your own issuer for storage certs (mongodb, scylla). In case if it is not set, the internal or default issuer will be used.
    issuer:
      # -- Labels
      labels: {}
      # -- Annotations
      annotations: {}
      # -- Name
      name:
      # -- Kind of internal issuer
      kind:
      # -- Group of internal issuer
      group:
      # -- cert-manager issuer spec
      spec:
    cert:
      # -- Certificate duration
      duration:
      # -- Certificate renew before
      renewBefore:
      key:
        # -- Certificate key algorithm
        algorithm:
        # -- Certificate key size
        size:
  coap:
    issuer:
      # -- Labels
      labels: {}
      # -- Annotations
      annotations: {}
      # -- Name
      name:
      # -- Kind of coap issuer
      kind:
      # -- Group of coap issuer
      group:
      # -- cert-manager issuer spec
      spec:
    cert:
      # -- Certificate duration
      duration:
      # -- Certificate renew before
      renewBefore:
      key:
        # -- Certificate key algorithm
        algorithm:
        # -- Certificate key size
        size:
  external:
    issuer:
      # -- Labels
      labels: {}
      # -- Annotations
      annotations: {}
      # -- Name
      name:
      # -- Kind of external issuer
      kind:
      # -- Group of external issuer
      group:
      # -- cert-manager issuer spec
      spec:
    cert:
      # -- Certificate duration
      duration:
      # -- Certificate renew before
      renewBefore:
      key:
        # -- Certificate key algorithm
        algorithm:
        # -- Certificate key size
        size:

# -- Configuration parameters for extraCAPool used by services and clients
extraCAPool:
  # -- Authorization CAPool section to verify the OAuth service certificate.
  authorization:
    # -- Enable extra authorization ca pool
    enabled: '{{ include "plgd-hub.extraCAPoolAuthorizationEnabled" . }}'
    # -- Volume and Mount name
    name: authorization-ca-pool
    # -- Mount path for custom auth ca pool
    mountPath: /certs/extra/authorization
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: '{{ include "plgd-hub.oldExtraCAPoolAuthorizationSecretName" . }}'
    # key in the configMap or secret that contains the CA Certificate or Bundle
    key: '{{ include "plgd-hub.oldExtraCAPoolAuthorizationFileName" . }}'
  # -- Internal CAPool section to verify internal and storage services certificates by plgd services
  internal:
    # -- Enable extra internal ca pool
    enabled: '{{ include "plgd-hub.extraCAPoolInternalEnabled" . }}'
    # -- Volume and Mount name
    name: internal-ca-pool
    # -- Mount path for custom internal ca pool
    mountPath: /certs/extra/internal
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: internal-ca-pool
    # key in the configMap or secret that contains the CA Certificate or Bundle
    key: ca.crt
  # -- Storage CAPool section to verify internal and storage services certificates by storage services
  storage:
    # -- Enable extra storage ca pool
    enabled: '{{ include "plgd-hub.extraCAPoolStorageEnabled" . }}'
    # -- Volume and Mount name
    name: storage-ca-pool
    # -- Mount path for custom storage ca pool
    mountPath: /certs/extra/storage
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: storage-ca-pool
    # key in the configMap or secret that contains the CA Certificate or Bundle
    key: ca.crt
  # -- CoAP CAPool section to verify device certificate by coap-gateway
  coap:
    # -- Enable extra coap ca pool
    enabled: '{{ include "plgd-hub.extraCAPoolCoapEnabled" . }}'
    # -- Volume and Mount name
    name: coap-ca-pool
    # -- Mount path for custom coap ca pool
    mountPath: /certs/extra/coap
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: coap-ca-pool
    # key in the configMap or secret that contains the CA Certificate or Bundle
    key: ca.crt

# -- Configuration parameters for CRL used by services and clients
crl:
  authorization:
    # -- Enable extra authorization crl
    enabled: '{{ include "plgd-hub.crlAuthorizationEnabled" . }}'
    # -- Volume and Mount name
    name: authorization-crl
    # -- Mount path for ca pool, cert and key
    mountPath: /certs/crl/authorization
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: authorization-crl
    http:
      maxIdleConns: 16
      maxConnsPerHost: 32
      maxIdleConnsPerHost: 16
      idleConnTimeout: 30s
      timeout: 10s
      tls:
        # key in the configMap or secret that contains the CA Certificate or Bundle
        caPoolKey: '{{ include "plgd-hub.crlHttpTlsCaPoolKey" (list . .Values.global.crl.authorization.caPool) }}'
        # key in the configMap or secret that contains the CRL Certificate
        crtKey: '{{ include "plgd-hub.crlHttpTlsCrtKey" (list . .Values.global.crl.authorization.crt) }}'
        # key in the configMap or secret that contains the CRL Private Key
        keyKey: '{{ include "plgd-hub.crlHttpTlsKeyKey" (list . .Values.global.crl.authorization.key) }}'
        useSystemCAPool: false
  internal:
    # -- Enable extra internal crl
    enabled: '{{ include "plgd-hub.crlInternalEnabled" . }}'
    # -- Volume and Mount name
    name: internal-crl
    # -- Mount path for ca pool, cert and key
    mountPath: /certs/crl/internal
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: internal-crl
    http:
      maxIdleConns: 16
      maxConnsPerHost: 32
      maxIdleConnsPerHost: 16
      idleConnTimeout: 30s
      timeout: 10s
      tls:
        # key in the configMap or secret that contains the CA Certificate or Bundle
        caPoolKey: '{{ include "plgd-hub.crlHttpTlsCaPoolKey" (list . .Values.global.crl.internal.caPool) }}'
        # key in the configMap or secret that contains the CRL Certificate
        crtKey: '{{ include "plgd-hub.crlHttpTlsCrtKey" (list . .Values.global.crl.internal.crt) }}'
        # key in the configMap or secret that contains the CRL Private Key
        keyKey: '{{ include "plgd-hub.crlHttpTlsKeyKey" (list . .Values.global.crl.internal.key) }}'
        useSystemCAPool: false
  coap:
    # -- Enable extra coap crl
    enabled: '{{ include "plgd-hub.crlCoapEnabled" . }}'
    # -- Volume and Mount name
    name: coap-crl
    # -- Mount path for ca pool, cert and key
    mountPath: /certs/crl/coap
    # set configMapName in order to mount an existing configMap to dir
    configMapName:
    # set secretName in order to mount an existing secretName to dir
    secretName: coap-crl
    http:
      maxIdleConns: 16
      maxConnsPerHost: 32
      maxIdleConnsPerHost: 16
      idleConnTimeout: 30s
      timeout: 10s
      tls:
        # key in the configMap or secret that contains the CA Certificate or Bundle
        caPoolKey: '{{ include "plgd-hub.crlHttpTlsCaPoolKey" (list . .Values.global.crl.coap.caPool) }}'
        # key in the configMap or secret that contains the CRL Certificate
        crtKey: '{{ include "plgd-hub.crlHttpTlsCrtKey" (list . .Values.global.crl.coap.crt) }}'
        # key in the configMap or secret that contains the CRL Private Key
        keyKey: '{{ include "plgd-hub.crlHttpTlsKeyKey" (list . .Values.global.crl.coap.key) }}'
        useSystemCAPool: false

resourcedirectory:
  # -- Enable resource-directory service
  enabled: true
  # -- Name of component. Used in label selectors
  name: resource-directory
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for resource-directory deployment
  deploymentLabels: {}
  # -- Additional annotations for resource-directory deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for resource-directory pod
  podLabels: {}
  # -- Annotations for resource-directory pod
  podAnnotations: {}
  service:
    # -- resource-directory service type
    type: ClusterIP
    # -- Labels for resource-directory service
    labels: {}
    # -- Annotations for resource-directory service
    annotations: {}
    # -- Target port
    targetPort: grpc
    # -- Protocol
    protocol: TCP
    # -- Name
    name: grpc
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # Create RBAC config
    enabled: false
    # -- Name of resource-directory SA
    serviceAccountName: resource-directory
    # -- template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition. Resolved as template
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/resource-directory
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
    # -- Container command
    command:
  # -- Liveness probe. resource-directory doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. resource-directory doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Service configuration
  config:
    # -- Service configuration file
    fileName: service.yaml
    # -- Service configuration volume name
    volume: config
    # -- Configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 9100
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- Log section
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete resource-directory service configuration see [plgd/resource-directory](https://github.com/plgd-dev/hub/tree/main/resource-directory)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      ownerCacheExpiration: 1m
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: true
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete resource-directory service configuration see [plgd/resource-directory](https://github.com/plgd-dev/hub/tree/main/resource-directory)
  clients:
    eventBus:
      # number of routines to process events in projection
      goPoolSize: 16
      nats:
        url: ""
        pendingLimits:
          msgLimit: "524288"
          bytesLimit: "67108864"
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    eventStore:
      # expiration time of cached resource in projection
      cacheExpiration: 20m
      use: mongoDB
      mongoDB:
        uri: ""
        database: eventStore
        # limits number of queries in one find request.
        batchSize: 128
        # limits number of connections.
        maxPoolSize: 16
        # close connection when idle time reach the value.
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
      cqlDB:
        table: events
        hosts: []
        port: 9142
        numConnections: 16
        connectTimeout: 10s
        # -- Resolve IP address to hostname before validate certificate. If false, the TLS validator will use ip/hostname advertised by the Cassandra node.
        useHostnameResolution: true
        reconnectionPolicy:
          constant:
            interval: 3s
            # 0 - means infinity
            maxRetries: 3
        keyspace:
          name: plgdhub
          create: true
          replication:
            class: SimpleStrategy
            replication_factor: 1
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    identityStore:
      pullFrequency: 15s
      cacheExpiration: 1m
      ownerClaim:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
      oauth:
        clientID:
        clientSecret:
        scopes: []
        tokenURL: ""
        audience: ""
        verifyServiceTokenFrequency: 10s
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: false
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete resource-directory service configuration see [plgd/resource-directory](https://github.com/plgd-dev/hub/tree/main/resource-directory)
  publicConfiguration:
    caPool:
    authority:
    ownerClaim:
    deviceIdClaim:
    coapGateway:
    defaultCommandTimeToLive:
    certificateAuthority:

resourceaggregate:
  # -- Enable resource-aggregate service
  enabled: true
  # -- Name of component. Used in label selectors
  name: resource-aggregate
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for resource-aggregate deployment
  deploymentLabels: {}
  # -- Additional annotations for resource-aggregate deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for resource-aggregate pod
  podLabels: {}
  # -- Annotations for resource-aggregate pod
  podAnnotations: {}
  service:
    # -- Service type
    type: ClusterIP
    # -- Labels for resource-aggregate service
    labels: {}
    # -- Annotations for resource-aggregate service
    annotations: {}
    # -- Target port
    targetPort: grpc
    # -- Protocol
    protocol: TCP
    # -- Name
    name: grpc
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # -- Create RBAC config
    enabled: false
    # -- Name of resource-aggregate SA
    serviceAccountName: resource-aggregate
    # -- template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition. Resolved as template
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/resource-aggregate
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. resource-aggregate doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. resource-aggregate doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Service configuration
  config:
    # -- Service configuration file name
    fileName: service.yaml
    # -- Volume name
    volume: config
    # -- Configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 9100
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- Log section
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete resource-aggregate service configuration see [plgd/resource-aggregate](https://github.com/plgd-dev/hub/tree/main/resource-aggregate)
  apis:
    grpc:
      ownerCacheExpiration: 1m
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: true
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete resource-aggregate service configuration see [plgd/resource-aggregate](https://github.com/plgd-dev/hub/tree/main/resource-aggregate)
  clients:
    eventBus:
      nats:
        url:
        jetstream: false
        flusherTimeout: 30s
        pendingLimits:
          msgLimit: 524288
          bytesLimit: "67108864"
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    eventStore:
      # replaces time to live in CreateResource, RetrieveResource, UpdateResource, DeleteResource and UpdateDeviceMetadata commands when it is zero value. 0s - means forever.
      defaultCommandTimeToLive:
      # limits number of try to store event
      occMaxRetry: 8
      use: mongoDB
      mongoDB:
        uri:
        database: eventStore
        # limits number of queries in one find request.
        batchSize: 128
        # limits number of connections.
        maxPoolSize: 16
        # close connection when idle time reach the value.
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      cqlDB:
        table: events
        hosts: []
        port: 9142
        numConnections: 16
        connectTimeout: 10s
        # -- Resolve IP address to hostname before validate certificate. If false, the TLS validator will use ip/hostname advertised by the Cassandra node.
        useHostnameResolution: true
        reconnectionPolicy:
          constant:
            interval: 3s
            # 0 - means infinity
            maxRetries: 3
        keyspace:
          name: plgdhub
          create: true
          replication:
            class: SimpleStrategy
            replication_factor: 1
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    identityStore:
      grpc:
        address:
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true

# -- CoAP gateway parameters
coapgateway:
  # -- Enable coap-gateway service
  enabled: true
  # -- Name of component. Used in label selectors
  name: coap-gateway
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for coap-gateway deployment
  deploymentLabels: {}
  # -- Additional annotations for coap-gateway deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for coap-gateway pod
  podLabels: {}
  # -- Annotations for coap-gateway pod
  podAnnotations: {}
  service:
    # -- Service type
    type: LoadBalancer
    # -- Use nodePort, if specified, for one of the protocols. If both protocols are enabled, nodePort needs to be configured directly in the service to mutually different ports.
    nodePort:
    # -- Default labels for coap-gateway services
    labels: {}
    # -- Default annotations for coap-gateway services
    annotations: {}
    # -- TCP service
    tcp:
      # -- Service type
      type:
      # -- Labels for coap-gateway service
      labels: {}
      # -- Annotations for coap-gateway service
      annotations: {}
      # -- Use nodePort if specified, must to be different as is in udp
      nodePort:
      # -- Target port
      targetPort: coaps-tcp
      # -- Protocol
      protocol: TCP
      # -- Name
      name: coaps-tcp
    # -- UDP service
    udp:
      # -- Service type
      type:
      # -- Labels for coap-gateway service
      labels: {}
      # -- Annotations for coap-gateway service
      annotations: {}
      # -- Use nodePort if specified. Must to be different as is in tcp
      nodePort:
      # -- Target port
      targetPort: coaps-udp
      # -- Protocol
      protocol: UDP
      # -- Name
      name: coaps-udp
  # -- RBAC configuration
  rbac:
    # -- Create RBAC config
    enabled: false
    # -- Name of coap-gateway SA
    serviceAccountName: coap-gateway
    # -- template definition for Role/binding etc..
    roleBindingDefinitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/coap-gateway
    # -- Image tag
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. coap-gateway doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. coap-gateway doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  config:
    # -- Service configuration file name
    fileName: service.yaml
    # -- Volume name
    volume: config
    # -- Configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 5684
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- service heartbeat section
  serviceHeartbeat:
    # -- Specifies validity of the presence record created by the gateway. Must be greater than 1s.
    timeToLive: 1m
  # -- Log section
  log:
    # -- Dump coap messages
    dumpBody: false
    # -- Logging enabled from level
    level: info
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete coap-gateway service configuration see [plgd/coap-gateway](https://github.com/plgd-dev/hub/tree/main/coap-gateway)
  apis:
    coap:
      externalAddress: ""
      protocols: ["tcp"]
      maxMessageSize: 262144
      ownerCacheExpiration: 1m
      subscriptionBufferSize: 1000
      messagePoolSize: 1000
      requireBatchObserveEnabled: true
      messageQueueSize: 16
      keepAlive:
        timeout: 20s
      blockwiseTransfer:
        enabled: true
        blockSize: "1024"
      tls:
        enabled: true
        # -- After the certificate expires, the connection will be disconnected
        disconnectOnExpiredCertificate: false
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: true
        identityPropertiesRequired: true
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        deviceIdClaim:
        providers:
  # -- For complete coap-gateway service configuration see [plgd/coap-gateway](https://github.com/plgd-dev/hub/tree/main/coap-gateway)
  clients:
    eventBus:
      nats:
        url: ""
        pendingLimits:
          msgLimit: "524288"
          bytesLimit: "67108864"
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    identityStore:
      ownerClaim:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    resourceAggregate:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    resourceDirectory:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    certificateAuthority:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
  # -- For complete coap-gateway service configuration see [plgd/coap-gateway](https://github.com/plgd-dev/hub/tree/main/coap-gateway)
  taskQueue:
    goPoolSize: 1600
    size: "2097152"
    maxIdleTime: "10m"
  deviceTwin:
    maxETagsCountInRequest: 8
    useETags: false

identitystore:
  # -- Enable identity service
  enabled: true
  # -- Name of component. Used in label selectors
  name: identity-store
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for identity deployment
  deploymentLabels: {}
  # -- Additional annotations for identity deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for identity pod
  podLabels: {}
  # -- Annotations for identity pod
  podAnnotations: {}
  # -- Service configuration
  service:
    # -- Service type
    type: ClusterIP
    # -- Service labels
    labels: {}
    # -- Service annotations
    annotations: {}
    # -- Target port
    targetPort: grpc
    # -- Protocol
    protocol: TCP
    # -- Name
    name: grpc
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # -- Enable RBAC setup
    enabled: false
    # -- Name of identity SA
    serviceAccountName: identity-store
    # -- Template definition for Role/binding etc.. Resolved as template
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition. Resolved as template
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  # -- Identity service image section
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/identity-store
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. Identity doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. Identity doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Extra volumes
  extraVolumes: {}
  # -- Extra volume mounts
  extraVolumeMounts: {}
  # -- Service and POD port
  port: 9100
  # -- yaml configuration
  config:
    # -- File name
    fileName: service.yaml
    # -- Volume name
    volume: config
    # -- Service configuration mount path
    mountPath: /config
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- Log section
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete identity service configuration see [plgd/identity](https://github.com/plgd-dev/hub/tree/main/identity)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: true
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        authority:
        audience:
        ownerClaim:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete identity service configuration see [plgd/authorization](https://github.com/plgd-dev/hub/tree/main/identity)
  clients:
    eventBus:
      nats:
        url: ""
        jetstream: false
        flusherTimeout: 30s
        tls:
          useSystemCAPool: false
    storage:
      use: mongoDB
      mongoDB:
        uri:
        database: "ownersDevices"
        # limits number of connections.
        maxPoolSize: 16
        # close connection when idle time reach the value.
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
      cqlDB:
        table: deviceOwners
        hosts: []
        port: 9142
        numConnections: 16
        connectTimeout: 10s
        # -- Resolve IP address to hostname before validate certificate. If false, the TLS validator will use ip/hostname advertised by the Cassandra node.
        useHostnameResolution: true
        reconnectionPolicy:
          constant:
            interval: 3s
            # 0 - means infinity
            maxRetries: 3
        keyspace:
          name: plgdhub
          create: true
          replication:
            class: SimpleStrategy
            replication_factor: 1
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false

httpgateway:
  # -- Enable http-gateway service
  enabled: true
  # -- Name of component. Used in label selectors
  name: http-gateway
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for http-gateway deployment
  deploymentLabels: {}
  # -- Additional annotations for http-gateway deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for http-gateway pod
  podLabels: {}
  # -- Annotations for http-gateway pod
  podAnnotations: {}
  service:
    type: ClusterIP
    # -- Labels for http-gateway service
    labels: {}
    # -- Annotations for http-gateway service
    annotations: {}
    # -- Target port
    targetPort: http
    # -- Protocol
    protocol: TCP
    # -- Name
    name: http
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # -- Enable RBAC setup
    enabled: false
    # -- Name of http-gateway SA
    serviceAccountName: http-gateway
    # -- Definition for Role/binding etc.. Render as template
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition. Render as template
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/http-gateway
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. http-gateway doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. http-gateway doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Domain for UI Default: {{ global.domain }}
  uiDomain:
  # -- Domain for http-gateway API. Default: api.{{ global.domain }}
  apiDomain:
  ingress:
    # -- API ingress
    api:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.httpgateway.fullname" . }}'
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Ingress path
      paths:
        - /api
        - /.well-known/hub-configuration
        - /.well-known/configuration
    # -- UI ingress
    ui:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Ingress path
      paths:
        - /
  # -- Http-gateway service yaml config section
  config:
    # -- Name of configuration file
    fileName: service.yaml
    # -- Volume for configuration file
    volume: config
    # -- Mount path
    mountPath: /config
  # -- Port for service and POD
  port: 9100
  log:
    # -- Logging enabled from level
    level: info
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete http-gateway service configuration see [plgd/http-gateway](https://github.com/plgd-dev/hub/tree/main/http-gateway)
  apis:
    http:
      address:
      readTimeout: 8s
      readHeaderTimeout: 4s
      writeTimeout: 16s
      idleTimeout: 30s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      webSocket:
        streamBodyLimit: 262144
        pingFrequency: 10s
      authorization:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete http-gateway service configuration see [plgd/http-gateway](https://github.com/plgd-dev/hub/tree/main/http-gateway)
  clients:
    grpcGateway:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
  # -- For complete http-gateway service configuration see [plgd/http-gateway](https://github.com/plgd-dev/hub/tree/main/http-gateway)
  ui:
    enabled: true
    directory: "/usr/local/var/www"
    theme: ""
    webConfiguration:
      httpGatewayAddress: ""
      deviceProvisioningService: ""
      snippetService: ""
      webOAuthClient:
        authority: ""
        clientID: ""
        audience: ""
        scopes: []
      deviceOAuthClient:
        authority: ""
        clientID:
        audience:
        scopes: []
        providerName:
      m2mOAuthClient:
        authority: ""
        clientID:
        audience:
        scopes: []
        grantType:
        clientAssertionType:
      visibility:
        mainSidebar:
          certificates: true
          chatRoom: true
          configuration: true
          deviceProvisioning: true
          devices: true
          docs: true
          pendingCommands: true
          remoteClients: true
          dashboard: false
          integrations: false
          deviceFirmwareUpdate: false
          deviceLogs: false
          apiTokens: true
          schemaHub: false
          snippetService: true

grpcgateway:
  # -- Enable grpc-gateway service
  enabled: true
  # -- Name of component. Used in label selectors
  name: grpc-gateway
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for grpc-gateway deployment
  deploymentLabels: {}
  # -- Additional annotations for grpc-gateway deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for grpc-gateway pod
  podLabels: {}
  # -- Annotations for grpc-gateway pod
  podAnnotations: {}
  service:
    # -- Service type
    type: ClusterIP
    # -- Labels for grpc-gateway service
    labels: {}
    # -- Annotations for grpc-gateway service
    annotations: {}
    # -- Target port
    targetPort: grpc
    # -- Protocol
    protocol: TCP
    # -- Name
    name: grpc
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # Enable RBAC
    enabled: false
    # -- Name of grpc-gateway SA
    serviceAccountName: grpc-gateway
    # -- Template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/grpc-gateway
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. grpc-gateway doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. grpc-gateway doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- External domain for grpc-gateway. Default: api.{{ global.domain }}
  domain:
  ingress:
    # -- Enable ingress
    enabled: true
    # -- Override name of host/tls secret. If not specified, it will be generated
    secretName:
    # -- Ingress annotations
    annotations:
      nginx.org/grpc-services: '{{ include "plgd-hub.grpcgateway.fullname" . }}'
      nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
      ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      cert-manager.io/private-key-rotation-policy: always
    # -- Custom map of Ingress annotation
    customAnnotations: {}

    paths:
      - /grpcgateway.pb.GrpcGateway
  # -- Service yaml configuration section
  config:
    # -- Service configuration file name
    fileName: service.yaml
    # -- Service configuration volume name
    volume: config
    # -- Service configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 9100
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete grpc-gateway service configuration see [plgd/grpc-gateway](https://github.com/plgd-dev/hub/tree/main/grpc-gateway)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      ownerCacheExpiration: 1m
      subscriptionBufferSize: 1000
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        authority: ""
        audience: ""
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete grpc-gateway service configuration see [plgd/grpc-gateway](https://github.com/plgd-dev/hub/tree/main/grpc-gateway)
  clients:
    identityStore:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
    eventBus:
      # number of routines to process events in projection
      goPoolSize: 16
      nats:
        url:
        pendingLimits:
          msgLimit: 524288
          # Current limitation with helm long number
          bytesLimit: "67108864"
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    resourceAggregate:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    resourceDirectory:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    certificateAuthority:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false

grpcreflection:
  # -- Enable grpc-reflection service
  enabled: true
  # -- Name of component. Used in label selectors
  name: grpc-reflection
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for grpc-reflection deployment
  deploymentLabels: {}
  # -- Additional annotations for grpc-reflection deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for grpc-reflection pod
  podLabels: {}
  # -- Annotations for grpc-reflection pod
  podAnnotations: {}
  service:
    # -- Service type
    type: ClusterIP
    # -- Labels for grpc-reflection service
    labels: {}
    # -- Annotations for grpc-reflection service
    annotations: {}
    # -- Target port
    targetPort: grpc
    # -- Protocol
    protocol: TCP
    # -- Name
    name: grpc
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # Enable RBAC
    enabled: false
    # -- Name of grpc-reflection SA
    serviceAccountName: grpc-reflection
    # -- Template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl: {}
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/grpc-reflection
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. grpc-reflection doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. grpc-reflection doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  ingress:
    # -- Enable ingress
    enabled: true
    # -- Override name of host/tls secret. If not specified, it will be generated
    secretName:
    # -- Ingress annotations
    annotations:
      nginx.org/grpc-services: '{{ include "plgd-hub.grpcreflection.fullname" . }}'
      nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
      ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      cert-manager.io/private-key-rotation-policy: always
    # -- Custom map of Ingress annotation
    customAnnotations: {}
    paths:
      - /grpc.reflection.v1alpha.ServerReflection
      - /grpc.reflection.v1.ServerReflection
  # -- Service yaml configuration section
  config:
    # -- Service configuration file name
    fileName: service.yaml
    # -- Service configuration volume name
    volume: config
    # -- Service configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 9100
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete grpc-reflection service configuration see [plgd/grpc-reflection](https://github.com/plgd-dev/hub/tree/main/grpc-reflection)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      ownerCacheExpiration: 1m
      subscriptionBufferSize: 1000
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false

certificateauthority:
  # -- Enable certificate-authority service
  enabled: true
  # -- Name of component. Used in label selectors
  name: certificate-authority
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for certificate-authority deployment
  deploymentLabels: {}
  # -- Additional annotations for certificate-authority deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for certificate-authority pod
  podLabels: {}
  # -- Annotations for certificate-authority pod
  podAnnotations: {}
  service:
    grpc:
      # -- Service type
      type: ClusterIP
      # -- Labels for certificate-authority service
      labels: {}
      # -- Annotations for certificate-authority service
      annotations: {}
      # -- Target port
      targetPort: grpc
      # -- Protocol
      protocol: TCP
      # -- Name
      name: grpc
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
    http:
      # -- Service type
      type: ClusterIP
      # -- Labels for certificate-authority service
      labels: {}
      # -- Annotations for certificate-authority service
      annotations: {}
      # -- Target port
      targetPort: http
      # -- Protocol
      protocol: TCP
      # -- Name
      name: http
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # -- Enable RBAC
    enabled: false
    # -- Name of certificate-authority SA
    serviceAccountName: certificate-authority
    # -- Template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext:
  # -- Image pull secrets
  imagePullSecrets:
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl:
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/certificate-authority
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets:
  # -- Liveness probe. certificate-authority doesn't have any default liveness probe
  livenessProbe:
  # -- Readiness probe. certificate-authority doesn't have aby default readiness probe
  readinessProbe:
  # -- Resources limit
  resources:
  # -- Node selector
  nodeSelector:
  # -- Affinity definition
  affinity:
  # -- Toleration definition
  tolerations:
  # -- Optional extra volumes
  extraVolumes:
  # -- Optional extra volume mounts
  extraVolumeMounts:
  # -- External domain for certificate-authority. Default: api.{{ global.domain }}
  domain:
  ingress:
    http:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.certificateauthority.fullname" . }}-http'
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Ingress path
      paths:
        - /api/v1/sign
        - /api/v1/signing
    grpc:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.certificateauthority.fullname" . }}-grpc'
        nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Paths
      paths:
        - /certificateauthority.pb.CertificateAuthority
  # -- Service configuration
  config:
    # -- File name for config file
    fileName: service.yaml
    # -- Config file volume name
    volume: config
    # -- Mount path
    mountPath: /config
  # -- CA section
  ca:
    secret:
      # -- Name of secret
      name:
        # -- Duration for default CA
    # -- Cert file name
    cert: tls.crt
    # -- Cert key file name
    key: tls.key
    # -- CA file name in case of external CA
    ca: ca.crt
    volume:
      # -- CA certificate volume name
      name: coap-device-ca
      # -- CA certificate mount path
      mountPath: /certs/coap-device-ca
  # -- Service and POD port
  port: 9100
  httpPort: 9101
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- Log section
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete certificate-authority service configuration see [plgd/certificate-authority](https://github.com/plgd-dev/hub/tree/main/certificate-authority)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: "30s"
          timeout: "10s"
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
    http:
      address:
      readTimeout: 8s
      readHeaderTimeout: 4s
      writeTimeout: 16s
      idleTimeout: 30s
  clients:
    storage:
      # -- Remove any invalid entries in the cron format. If an empty string is provided, the cleanup function will be disabled.
      cleanUpRecords: "0 1 * * *"
      use: mongoDB
      mongoDB:
        uri:
        database: certificateAuthorityService
        maxPoolSize: 16
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
      cqlDB:
        table: signedCertificateRecords
        hosts: []
        port: 9142
        numConnections: 16
        connectTimeout: 10s
        # -- Resolve IP address to hostname before validate certificate. If false, the TLS validator will use ip/hostname advertised by the Cassandra node.
        useHostnameResolution: true
        reconnectionPolicy:
          constant:
            interval: 3s
            # 0 - means infinity
            maxRetries: 3
        keyspace:
          name: plgdhub
          create: true
          replication:
            class: SimpleStrategy
            replication_factor: 1
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
  # -- For complete certificate-authority service configuration see [plgd/certificate-authority](https://github.com/plgd-dev/hub/tree/main/certificate-authority)
  signer:
    caPool:
    keyFile:
    certFile:
    validFrom: "now-1h"
    expiresIn: "87600h"
    crl:
      expiresIn: "10m"

snippetservice:
  # -- Enable snippet-service
  enabled: true
  # -- Name of component. Used in label selectors
  name: snippet-service
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for snippet-service deployment
  deploymentLabels: {}
  # -- Additional annotations for snippet-service deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for snippet-service pod
  podLabels: {}
  # -- Annotations for snippet-service pod
  podAnnotations: {}
  service:
    grpc:
      # -- Service type
      type: ClusterIP
      # -- Labels for snippet-service
      labels: {}
      # -- Annotations for snippet-service
      annotations: {}
      # -- Target port
      targetPort: grpc
      # -- Protocol
      protocol: TCP
      # -- Name
      name: grpc
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
    http:
      # -- Service type
      type: ClusterIP
      # -- Labels for snippet-service
      labels: {}
      # -- Annotations for snippet-service
      annotations: {}
      # -- Target port
      targetPort: http
      # -- Protocol
      protocol: TCP
      # -- Name
      name: http
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
  # -- RBAC configuration
  rbac:
    # -- Enable RBAC
    enabled: false
    # -- Name of snippet-service SA
    serviceAccountName: snippet-service
    # -- Template definition for Role/binding etc..
    roleBindingDefitionTpl:
  # -- Security context for pod
  securityContext:
  # -- Image pull secrets
  imagePullSecrets:
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl:
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/snippet-service
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets:
  # -- Liveness probe. snippet-service doesn't have any default liveness probe
  livenessProbe:
  # -- Readiness probe. snippet-service doesn't have aby default readiness probe
  readinessProbe:
  # -- Resources limit
  resources:
  # -- Node selector
  nodeSelector:
  # -- Affinity definition
  affinity:
  # -- Toleration definition
  tolerations:
  # -- Optional extra volumes
  extraVolumes:
  # -- Optional extra volume mounts
  extraVolumeMounts:
  # -- External domain for snippet-service. Default: api.{{ global.domain }}
  domain:
  ingress:
    http:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.snippetservice.fullname" . }}-http'
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Ingress path
      paths:
        - /snippet-service
    grpc:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.snippetservice.fullname" . }}-grpc'
        nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Paths
      paths:
        - /snippetservice.pb.SnippetService
  # -- Service configuration
  config:
    # -- File name for config file
    fileName: service.yaml
    # -- Config file volume name
    volume: config
    # -- Mount path
    mountPath: /config
  # -- Service and POD port
  port: 9100
  httpPort: 9101
  # -- Hub ID. Overrides the global.hubId
  hubId:
  # -- Log section
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete snippet-service configuration see [plgd/snippet-service](https://github.com/plgd-dev/hub/tree/main/snippet-service)
  apis:
    grpc:
      address:
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: "30s"
          timeout: "10s"
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
    http:
      address:
      readTimeout: 8s
      readHeaderTimeout: 4s
      writeTimeout: 16s
      idleTimeout: 30s
  clients:
    eventBus:
      subscriptionID: snippet-service
      nats:
        url: ""
        pendingLimits:
          msgLimit: "524288"
          bytesLimit: "67108864"
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    storage:
      cleanUpExpiredUpdates: "0 * * * *"
      use: mongoDB
      mongoDB:
        uri:
        database: snippetService
        maxPoolSize: 16
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
    resourceAggregate:
      grpc:
        address: ""
        sendMsgSize: 4194304
        recvMsgSize: 4194304
        keepAlive:
          time: 10s
          timeout: 20s
          permitWithoutStream: true
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false

mockoauthserver:
  oauth:
    - name: "plgd.mobile"
      clientID: "test"
      clientSecret: "test"
      redirectURL: "cloud.plgd.mobile://login-callback"
    - name: "plgd.web"
      clientID: "test"
      clientSecret: "test"
      redirectURL: '{{ printf "https://%s" ( include "plgd-hub.mockoauthserver.ingressDomain" . ) }}/devices'
      useInUi: true

  # -- Enable mock-oauth-server service
  enabled: false
  # -- Name of component. Used in label selectors
  name: mock-oauth-server
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for mock-oauth-server deployment
  deploymentLabels: {}
  # -- Additional annotations for mock-oauth-server deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for http-gateway pod
  podLabels: {}
  # -- Annotations for mock-oauth-server pod
  podAnnotations: {}
  service:
    type: ClusterIP
    # -- Labels for mock-oauth-server service
    labels: {}
    # -- Annotations for mock-oauth-server service
    annotations: {}
    # -- Target port
    targetPort: http
    # -- Protocol
    protocol: TCP
    # -- Name
    name: http
    crt:
      # -- Extra DNS names for service certificate
      extraDnsNames: []
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/mock-oauth-server
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. mock-oauth-server doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. mock-oauth-server doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Domain for   apiDomain: Default: auth.{{ global.domain }}
  domain:
  ingress:
    # -- Enable ingress
    enabled: true
    # -- Pre defined map of Ingress annotation
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      cert-manager.io/private-key-rotation-policy: always
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "Host $host";
        more_set_headers "X-Forwarded-Host $host";
        more_set_headers "X-Forwarded-Proto $scheme";
        set $cors "true";
        if ($request_method = 'OPTIONS') {
          set $cors "${cors}options";
        }
        if ($cors = "trueoptions") {
          add_header 'Access-Control-Allow-Origin' "$http_origin";
          add_header 'Access-Control-Allow-Credentials' 'true';
          add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, PATCH, OPTIONS';
          add_header 'Access-Control-Allow-Headers' '{{ .Values.mockoauthserver.ingress.allowHeaders }}';
          add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
        }
        if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Credentials' 'true';
        }
        if ($request_method = 'PUT') {
        add_header 'Access-Control-Allow-Credentials' 'true';
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Credentials' 'true';
        }
    # -- Custom map of Ingress annotation
    customAnnotations: {}
    # -- Ingress path
    paths:
      - /authorize
      - /oauth/token
      - /.well-known/jwks.json
      - /.well-known/openid-configuration
      - /v2/logout
      - /authorize/userinfo
    allowHeaders: "Authortity,Method,Path,Scheme,Accept,Accept-Encoding,Accept-Language,Content-Type,auth0-client,Origin,Refer,Sec-Fetch-Dest,Sec-Fetch-Mode,Sec-Fetch-Site,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
  # -- mock-oauth-server service yaml config section
  config:
    # -- Name of configuration file
    fileName: service.yaml
    # -- Volume for configuration file
    volume: config
    # -- Mount path
    mountPath: /config
  # -- Port for service and POD
  port: 9100
  log:
    # -- Logging enabled from level
    level: info
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete mock-oauth-server service configuration see [plgd/oauth-server](https://github.com/plgd-dev/hub/tree/main/test/oauth-server)
  apis:
    http:
      address:
      readTimeout: 8s
      readHeaderTimeout: 4s
      writeTimeout: 16s
      idleTimeout: 30s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
  oauthSigner:
    idTokenKeyFile: "/keys/idToken.key"
    accessTokenKeyFile: "/keys/accessToken.key"
    domain:
    clients:
      id: "test"
      authorizationCodeLifetime: "10m"
      accessTokenLifetime: "0s"
      codeRestrictionLifetime: "0s"
      refreshTokenRestrictionLifetime: "0s"

m2moauthserver:
  # -- Enable m2m-oauth-server service
  enabled: true
  # -- Name of component. Used in label selectors
  name: m2m-oauth-server
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for m2m-oauth-server deployment
  deploymentLabels: {}
  # -- Additional annotations for m2m-oauth-server deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for http-gateway pod
  podLabels: {}
  # -- Annotations for m2m-oauth-server pod
  podAnnotations: {}
  service:
    grpc:
      # -- Service type
      type: ClusterIP
      # -- Labels for m2m-oauth-server
      labels: {}
      # -- Annotations for m2m-oauth-server
      annotations: {}
      # -- Target port
      targetPort: grpc
      # -- Protocol
      protocol: TCP
      # -- Name
      name: grpc
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
    http:
      # -- Service type
      type: ClusterIP
      # -- Labels for m2m-oauth-server
      labels: {}
      # -- Annotations for m2m-oauth-server
      annotations: {}
      # -- Target port
      targetPort: http
      # -- Protocol
      protocol: TCP
      # -- Name
      name: http
      crt:
        # -- Extra DNS names for service certificate
        extraDnsNames: []
  # -- RBAC configuration
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/m2m-oauth-server
    # -- Image tag.
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. m2m-oauth-server doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. m2m-oauth-server doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: {}
  # -- Optional extra volumes
  extraVolumes: {}
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Domain for oauth. Default {{ global.domain }}
  domain:
  ingress:
    http:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Ingress path
      paths:
        - /m2m-oauth-server
      allowHeaders: "Authortity,Method,Path,Scheme,Accept,Accept-Encoding,Accept-Language,Content-Type,auth0-client,Origin,Refer,Sec-Fetch-Dest,Sec-Fetch-Mode,Sec-Fetch-Site,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
    grpc:
      # -- Enable ingress
      enabled: true
      # -- Override name of host/tls secret. If not specified, it will be generated
      secretName:
      # -- Pre defined map of Ingress annotation
      annotations:
        nginx.org/grpc-services: '{{ include "plgd-hub.m2moauthserver.fullname" . }}-grpc'
        nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        cert-manager.io/private-key-rotation-policy: always
      # -- Custom map of Ingress annotation
      customAnnotations: {}
      # -- Paths
      paths:
        - /m2moauthserver.pb.M2MOAuthService
  # -- m2m-oauth-server service yaml config section
  config:
    # -- Name of configuration file
    fileName: service.yaml
    # -- Volume for configuration file
    volume: config
    # -- Mount path
    mountPath: /config
  # -- Port for service and POD
  port: 9100
  httpPort: 9101
  privateKey:
    # -- Set deployment to use secret for private key
    enabled: false
    # -- Name of private key file
    fileName: private.key
    # -- Name of secret
    secretName: m2m-private-key
    # -- Volume name
    volume: private-key
    # -- Mount path
    mountPath: /secrets/keys
  log:
    # -- Logging enabled from level
    level: info
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete m2m-oauth-server service configuration see [plgd/oauth-server](https://github.com/plgd-dev/hub/tree/main/test/oauth-server)
  apis:
    http:
      address:
      readTimeout: 8s
      readHeaderTimeout: 4s
      writeTimeout: 16s
      idleTimeout: 30s
    grpc:
      address: ""
      sendMsgSize: 4194304
      recvMsgSize: 4194304
      enforcementPolicy:
        minTime: 5s
        permitWithoutStream: true
      keepAlive:
        # 0s - means infinity
        maxConnectionIdle: 0s
        # 0s - means infinity
        maxConnectionAge: 0s
        # 0s - means infinity
        maxConnectionAgeGrace: 0s
        time: 2h
        timeout: 20s
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: "30s"
          timeout: "10s"
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: false
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  clients:
    storage:
      cleanUpDeletedTokens: "0 * * * *"
      use: mongoDB
      mongoDB:
        uri:
        database: m2mOAuthServer
        maxPoolSize: 16
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
  oauthSigner:
    privateKeyFile:
    domain:
    ownerClaim:
    deviceIDClaim:
    clients:
      - id: "jwt-private-key"
        accessTokenLifetime: 0s
        allowedGrantTypes:
          - client_credentials
        allowedAudiences: []
        allowedScopes: []
        jwtPrivateKey:
          enabled: true
          authorization:
            audience:
            endpoints:

deviceProvisioningService:
  # -- Enable device-provisioning-service
  enabled: true
  # -- Name of component. Used in label selectors
  name: device-provisioning-service
  # -- Full name to override
  fullnameOverride:
  # -- Number of replicas
  replicas: 1
  # -- Additional labels for dps deployment
  deploymentLabels: {}
  # -- Additional annotations for dps deployment
  deploymentAnnotations: {}
  # -- Pod security context
  podSecurityContext: {}
  # -- Labels for dps pod
  podLabels: {}
  # -- Annotations for dps pod
  podAnnotations: {}
  service:
    # -- Service type
    type: LoadBalancer
    # -- Use nodePort, if specified, for one of the protocols. If both protocols are enabled, nodePort needs to be configured directly in the service to mutually different ports.
    nodePort: 15684
    tcp:
      # -- Service type
      type:
      # -- Labels for coap-gateway service
      labels: {}
      # -- Annotations for coap-gateway service
      annotations: {}
      # -- Use nodePort if specified, must to be different as is in udp
      nodePort:
      # -- Target port
      targetPort: coaps-tcp
      # -- Protocol
      protocol: TCP
      # -- Name
      name: coaps-tcp
    udp:
      # -- Service type
      type:
      # -- Labels for coap-gateway service
      labels: {}
      # -- Annotations for coap-gateway service
      annotations: {}
      # -- Use nodePort if specified. Must to be different as is in tcp
      nodePort:
      # -- Target port
      targetPort: coaps-udp
      # -- Protocol
      protocol: UDP
      # -- Name
      name: coaps-udp
    http:
      # -- Service type
      type:
      # -- Labels for coap-gateway service
      labels: {}
      # -- Annotations for coap-gateway service
      annotations: {}
      # -- Target port
      targetPort: http
      # -- Protocol
      protocol: TCP
      # -- Name
      name: http
    # -- Labels for dps service
    labels: {}
    # -- Annotations for dps service
    annotations: {}
    # -- Service certificate
    certificate:
      # -- Mount path
      mountPath:
      # -- Labels
      labels:
        {}
        # -- Annotations for dps service certificate
      annotations: {}
      # -- Certificate duration
      duration:
      # -- Certificate renew before
      renewBefore:
      key:
        # -- Certificate key algorithm
        algorithm:
        # -- Certificate key size
        size:
      issuer:
        # -- Name of issuer
        name:
        # -- Kind of issuer
        kind:
        # -- Group of issuer
        group:
  # -- RBAC configuration
  rbac:
    # -- Create RBAC config
    enabled: false
    # -- Name of dps SA
    serviceAccountName: device-provisioning-service
    # -- Template definition for Role/binding etc..
    roleBindingDefinitionTpl:
  # -- Security context for pod
  securityContext: {}
  # -- Image pull secrets
  imagePullSecrets: {}
  # -- Restart policy for pod
  restartPolicy: Always
  # -- Init containers definition
  initContainersTpl:
  # -- Extra POD containers
  extraContainers: {}
  image:
    # -- Image registry
    registry: ghcr.io/
    # -- Image repository
    repository: plgd-dev/hub/device-provisioning-service
    # -- Image tag
    tag:
    # -- Image pull policy
    pullPolicy: Always
    # -- Image pull secrets
    imagePullSecrets: {}
  # -- Liveness probe. dps doesn't have any default liveness probe
  livenessProbe: {}
  # -- Readiness probe. dps doesn't have aby default readiness probe
  readinessProbe: {}
  # -- Resources limit
  resources: {}
  # -- Node selector
  nodeSelector: {}
  # -- Affinity definition
  affinity: {}
  # -- Toleration definition
  tolerations: []
  # -- Optional extra volumes
  extraVolumes: []
  # -- Optional extra volume mounts
  extraVolumeMounts: {}
  # -- Domain for dps HTTP API endpoint
  apiDomain:
  # -- Ingress
  ingress:
    # -- Enable ingress
    enabled: true
    # -- Ingress annotation
    annotations: {}
    # -- Domain certificate name
    domainCertName:
    # -- Ingress path
    paths:
      - /api/v1/provisioning-records
      - /api/v1/enrollment-groups
      - /api/v1/hubs
  config:
    # -- Service configuration file name
    fileName: service.yaml
    # -- Volume name
    volume: config
    # -- Configuration mount path
    mountPath: /config
  # -- Service and POD port
  port: 15684
  log:
    # -- Logging enabled from level
    level: info
    # -- Dump grpc messages
    dumpBody: false
    # -- The supported values are: "json", "console"
    encoding: json
    stacktrace:
      # -- Log stacktrace
      enabled: false
      # -- Stacktrace from level
      level: warn
    encoderConfig:
      # -- Time format for logs. The supported values are: "rfc3339nano", "rfc3339"
      timeEncoder: rfc3339nano
  # -- For complete device-provisioning-service configuration see [plgd/device-provisioning-service](https://github.com/plgd-dev/hub/tree/main/device-provisioning-service)
  apis:
    coap:
      address: ""
      maxMessageSize: 262144
      messagePoolSize: 1000
      protocols: ["tcp"]
      inactivityMonitor:
        timeout: 20s
      blockwiseTransfer:
        enabled: true
        blockSize: "1024"
      tls:
        keyFile:
        certFile:
    http:
      enabled: true
      address:
      port: 9100
      tls:
        caPool:
        keyFile:
        certFile:
        clientCertificateRequired: false
        crl:
          enabled: false
          http:
            maxIdleConns: 16
            maxConnsPerHost: 32
            maxIdleConnsPerHost: 16
            idleConnTimeout: 30s
            timeout: 10s
            tls:
              caPool:
              keyFile:
              certFile:
              useSystemCAPool: false
      authorization:
        ownerClaim:
        authority:
        audience:
        http:
          maxIdleConns: 16
          maxConnsPerHost: 32
          maxIdleConnsPerHost: 16
          idleConnTimeout: 30s
          timeout: 10s
          tls:
            caPool:
            keyFile:
            certFile:
            useSystemCAPool: true
            crl:
              enabled: false
              http:
                maxIdleConns: 16
                maxConnsPerHost: 32
                maxIdleConnsPerHost: 16
                idleConnTimeout: 30s
                timeout: 10s
                tls:
                  caPool:
                  keyFile:
                  certFile:
                  useSystemCAPool: false
  # -- For complete dps service configuration see [plgd/device-provisioning-service](https://github.com/plgd-dev/hub/device-provisioning-service)
  clients:
    storage:
      cacheExpiration: 10m
      mongoDB:
        uri:
        database: deviceProvisioningService
        maxPoolSize: 16
        maxConnIdleTime: 4m0s
        tls:
          caPool:
          keyFile:
          certFile:
          useSystemCAPool: false
          crl:
            enabled: false
            http:
              maxIdleConns: 16
              maxConnsPerHost: 32
              maxIdleConnsPerHost: 16
              idleConnTimeout: 30s
              timeout: 10s
              tls:
                caPool:
                keyFile:
                certFile:
                useSystemCAPool: false
        bulkWrite:
          # -- A time limit for write bulk to mongodb. A Timeout of zero means no timeout.
          timeout: 1m0s
          # -- The amount of time to wait until a record is written to mongodb. Any records collected during the throttle time will also be written. A throttle time of zero writes immediately. If recordLimit is reached, all records are written immediately
          throttleTime: 500ms
          # -- The maximum number of documents to cache before an immediate write.
          documentLimit: 1000
